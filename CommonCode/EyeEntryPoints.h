/*--------------------------------------------------------------------------------------*//*                                                                                      *//*  File:       EyeEntryPoints.h                                                        *//*                                                                                      *//*  Contains:   The data type declarations that are needed for standard eyes.           *//*                                                                                      *//*  Written by: Norman Jaffe                                                            *//*                                                                                      *//*  Copyright:  (c) 2001 by T. H. Schiphorst, N. Jaffe, K. Gregory and G. I. Gregson.   *//*                                                                                      *//*              All rights reserved. Redistribution and use in source and binary forms, *//*              with or without modification, are permitted provided that the following *//*              conditions are met:                                                     *//*                * Redistributions of source code must retain the above copyright      *//*                  notice, this list of conditions and the following disclaimer.       *//*                * Redistributions in binary form must reproduce the above copyright   *//*                  notice, this list of conditions and the following disclaimer in the *//*                  documentation and/or other materials provided with the              *//*                  distribution.                                                       *//*                * Neither the name of the copyright holders nor the names of its      *//*                  contributors may be used to endorse or promote products derived     *//*                  from this software without specific prior written permission.       *//*                                                                                      *//*              THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS     *//*              "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT       *//*              LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A *//*              PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT      *//*              OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,   *//*              SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT        *//*              LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,   *//*              DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY   *//*              THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT     *//*              (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE   *//*              OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.    *//*                                                                                      *//*  Created:    2001/08/27                                                              *//*                                                                                      *//*--------------------------------------------------------------------------------------*/#if (! defined(EYEENTRYPOINTS_H_)) #define EYEENTRYPOINTS_H_ /* */ #include <CodeFragments.h> #include <MixedMode.h> #include "StandardEyeTypes.h" #if COMPILE_FOR_OSX_4typedef void (* FpDoAssist)  (OwnerPtr 	owner,   Ptr      	sharedStorage,   Ptr      	privateStorage,   const long	msg,   const long	arg,   Pchar    	dstString);typedef void (* FpDoDisplay)  (OwnerPtr 	owner,   Ptr      	sharedStorage,   Ptr      	privateStorage,   PGWorld		aWorld,   HPixmap		offPixMap,   const long	displayIncomingImage,   const long	displayColor,   const long	displayDim);   typedef void (* FpGetSettings)  (OwnerPtr owner,   Ptr      sharedStorage,   Ptr      privateStorage,   Pbool    twoOrOne,   Plong    displayIncoming);typedef void (* FpDoGetValues)  (OwnerPtr owner,   Ptr      sharedStorage,   Ptr      privateStorage,   Pshort   ac,   PAtom    av);typedef void (* FpDoGo)  (OwnerPtr owner,   Ptr      sharedStorage,   Ptr      privateStorage);typedef void (* FpDoGraphics)  (OwnerPtr owner,   Ptr      sharedStorage,   Ptr      privateStorage);typedef void (* FpDoIndex)  (OwnerPtr owner,   Ptr      sharedStorage,   Ptr      privateStorage,   Pvoid    sensor);typedef Pchar (* FpDoMyName)  (OwnerPtr owner,   Ptr      sharedStorage,   Ptr      privateStorage);typedef void (* FpDoSave)  (OwnerPtr owner,   Ptr      sharedStorage,   Ptr      privateStorage,   Pshort   ac,   PAtom    av);typedef void (* FpDoSetParameterDouble)  (OwnerPtr 		owner,   Ptr      		sharedStorage,   Ptr      		privateStorage,   const short  which,   const double	value);typedef void (* FpDoSetParameterList)  (OwnerPtr 		owner,   Ptr      		sharedStorage,   Ptr      		privateStorage,   const short  which,   const short	argc,   PAtom    		argv);typedef void (* FpDoSetParameterLong)  (OwnerPtr 		owner,   Ptr      		sharedStorage,   Ptr      		privateStorage,   const short	which,   const long   value);typedef void (* FpDoSetParameters)  (OwnerPtr 		owner,   Ptr      		sharedStorage,   Ptr      		privateStorage,   Pshort   		base,   const short	argc,   PAtom    		argv);typedef void (* FpDoSource)  (OwnerPtr owner,   Ptr      sharedStorage,   Ptr      privateStorage,   Pvoid    source);typedef void (* FpDoSource2)  (OwnerPtr owner,   Ptr      sharedStorage,   Ptr      privateStorage,   Pvoid    source);typedef void (* FpDoTarget)  (OwnerPtr owner,   Ptr      sharedStorage,   Ptr      privateStorage,   Pvoid    target);   typedef OSErr (* FpMain)  (CFragConnectionID  connID,   OwnerPtr           owner,   Handle             sharedStorage);typedef OSErr (* FpNiam)  (OwnerPtr owner,   Ptr      sharedStorage);typedef OSErr (* FpOnCreate)  (OwnerPtr 		owner,   Pchar    		theName,   Ptr      		sharedStorage,   Handle   		privateStorage,   const short	argc,   PAtom    		argv,   Pshort   		numInlets,   Pshort   		numOutlets);typedef OSErr (* FpOnDestroy)  (OwnerPtr owner,   Ptr      sharedStorage,   Ptr      privateStorage);typedef OSErr (* FpOnReload)  (CFragConnectionID  connID,   OwnerPtr           owner,   Ptr                sharedStorage); #endif /* COMPILE_FOR_OSX_4 */ #if COMPILE_FOR_OS9_4  #define EYE_PROCINFO_PREFIX \    STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(OwnerPtr))) | \    STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(Ptr))) | \    STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(Ptr)))  #define FIRST_EYE_ARG 4enum{  uppDoAssistProcInfo = (kCStackBased |                        EYE_PROCINFO_PREFIX |                        STACK_ROUTINE_PARAMETER(FIRST_EYE_ARG, SIZE_CODE(sizeof(long))) |                        STACK_ROUTINE_PARAMETER((FIRST_EYE_ARG + 1), SIZE_CODE(sizeof(long))) |                        STACK_ROUTINE_PARAMETER((FIRST_EYE_ARG + 2), SIZE_CODE(sizeof(Pchar)))),  uppDoDisplayProcInfo = (kCStackBased |                          EYE_PROCINFO_PREFIX |                          STACK_ROUTINE_PARAMETER((FIRST_EYE_ARG), SIZE_CODE(sizeof(PGWorld))) |                          STACK_ROUTINE_PARAMETER((FIRST_EYE_ARG + 1), SIZE_CODE(sizeof(HPixmap))) |                          STACK_ROUTINE_PARAMETER((FIRST_EYE_ARG + 2), SIZE_CODE(sizeof(long))) |                          STACK_ROUTINE_PARAMETER((FIRST_EYE_ARG + 3), SIZE_CODE(sizeof(long))) |                          STACK_ROUTINE_PARAMETER((FIRST_EYE_ARG + 4), SIZE_CODE(sizeof(long)))),  uppDoGetSettingsProcInfo = (kCStackBased |                            EYE_PROCINFO_PREFIX |                            STACK_ROUTINE_PARAMETER((FIRST_EYE_ARG), SIZE_CODE(sizeof(Pbool))) |                            STACK_ROUTINE_PARAMETER((FIRST_EYE_ARG + 1), SIZE_CODE(sizeof(Plong)))),  uppDoGetValuesProcInfo = (kCStackBased |                          EYE_PROCINFO_PREFIX |                          STACK_ROUTINE_PARAMETER(FIRST_EYE_ARG, SIZE_CODE(sizeof(Pshort))) |                          STACK_ROUTINE_PARAMETER((FIRST_EYE_ARG + 1), SIZE_CODE(sizeof(PAtom)))),  uppDoGoProcInfo = (kCStackBased |                    EYE_PROCINFO_PREFIX),  uppDoGraphicsProcInfo = (kCStackBased |                           EYE_PROCINFO_PREFIX),  uppDoIndexProcInfo = (kCStackBased |                      EYE_PROCINFO_PREFIX |                      STACK_ROUTINE_PARAMETER(FIRST_EYE_ARG, SIZE_CODE(sizeof(Pvoid)))),  uppDoMyNameProcInfo = (kCStackBased |                        RESULT_SIZE(SIZE_CODE(sizeof(Pchar))) |                        EYE_PROCINFO_PREFIX),  uppDoSaveProcInfo = (kCStackBased |                      EYE_PROCINFO_PREFIX |                      STACK_ROUTINE_PARAMETER(FIRST_EYE_ARG, SIZE_CODE(sizeof(Pshort))) |                      STACK_ROUTINE_PARAMETER((FIRST_EYE_ARG + 1), SIZE_CODE(sizeof(PAtom)))),  uppDoSetParameterDoubleProcInfo = (kCStackBased |                                    EYE_PROCINFO_PREFIX |                                    STACK_ROUTINE_PARAMETER(FIRST_EYE_ARG, SIZE_CODE(sizeof(short))) |                                    STACK_ROUTINE_PARAMETER((FIRST_EYE_ARG + 1), SIZE_CODE(sizeof(double)))),  uppDoSetParameterListProcInfo = (kCStackBased |                                  EYE_PROCINFO_PREFIX |                                  STACK_ROUTINE_PARAMETER(FIRST_EYE_ARG, SIZE_CODE(sizeof(short))) |                                  STACK_ROUTINE_PARAMETER((FIRST_EYE_ARG + 1), SIZE_CODE(sizeof(short))) |                                  STACK_ROUTINE_PARAMETER((FIRST_EYE_ARG + 2), SIZE_CODE(sizeof(PAtom)))),  uppDoSetParameterLongProcInfo = (kCStackBased |                                  EYE_PROCINFO_PREFIX |                                  STACK_ROUTINE_PARAMETER(FIRST_EYE_ARG, SIZE_CODE(sizeof(short))) |                                  STACK_ROUTINE_PARAMETER((FIRST_EYE_ARG + 1), SIZE_CODE(sizeof(long)))),  uppDoSetParametersProcInfo = (kCStackBased |                              EYE_PROCINFO_PREFIX |                              STACK_ROUTINE_PARAMETER(FIRST_EYE_ARG, SIZE_CODE(sizeof(Pshort))) |                              STACK_ROUTINE_PARAMETER((FIRST_EYE_ARG + 1), SIZE_CODE(sizeof(short))) |                              STACK_ROUTINE_PARAMETER((FIRST_EYE_ARG + 2), SIZE_CODE(sizeof(PAtom)))),  uppDoSourceProcInfo = (kCStackBased |                        EYE_PROCINFO_PREFIX |                        STACK_ROUTINE_PARAMETER(FIRST_EYE_ARG, SIZE_CODE(sizeof(Pvoid)))),  uppDoSource2ProcInfo = (kCStackBased |                        EYE_PROCINFO_PREFIX |                        STACK_ROUTINE_PARAMETER(FIRST_EYE_ARG, SIZE_CODE(sizeof(Pvoid)))),  uppDoTargetProcInfo = (kCStackBased |                        EYE_PROCINFO_PREFIX |                        STACK_ROUTINE_PARAMETER(FIRST_EYE_ARG, SIZE_CODE(sizeof(Pvoid)))),  uppMainProcInfo = (kCStackBased |                     RESULT_SIZE(SIZE_CODE(sizeof(OSErr))) |                    STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(CFragConnectionID))) |                    STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(OwnerPtr))) |                    STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(Handle)))),  uppNiamProcInfo = (kCStackBased |                      RESULT_SIZE(SIZE_CODE(sizeof(OSErr))) |                      STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(OwnerPtr))) |                      STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(Ptr)))),  uppOnCreateProcInfo = (kCStackBased |                        RESULT_SIZE(SIZE_CODE(sizeof(OSErr))) |                        STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(OwnerPtr))) |                        STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(Pchar))) |                        STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(Ptr))) |                        STACK_ROUTINE_PARAMETER(4, SIZE_CODE(sizeof(Handle))) |                        STACK_ROUTINE_PARAMETER(5, SIZE_CODE(sizeof(short))) |                        STACK_ROUTINE_PARAMETER(6, SIZE_CODE(sizeof(PAtom))) |                        STACK_ROUTINE_PARAMETER(7, SIZE_CODE(sizeof(Pshort))) |                        STACK_ROUTINE_PARAMETER(8, SIZE_CODE(sizeof(Pshort)))),  uppOnDestroyProcInfo = (kCStackBased |                          RESULT_SIZE(SIZE_CODE(sizeof(OSErr))) |                          STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(OwnerPtr))) |                          STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(Ptr))) |                          STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(Ptr)))),  uppOnReloadProcInfo = (kCStackBased |                         RESULT_SIZE(SIZE_CODE(sizeof(OSErr))) |                        STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(CFragConnectionID))) |                        STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(OwnerPtr))) |                        STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(Ptr))))}; #endif /* COMPILE_FOR_OS9_4 */#endif /* not EYEENTRYPOINTS_H_ */